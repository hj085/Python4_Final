import pygame
import sys


class TicTacToe:
    def __init__(self):
        pygame.init()

        self.width = 500
        self.height = 500
        self.screen = pygame.display.set_mode((self.width, self.height))

        pygame.display.set_caption("4x4 Tic Tac Toe")

        self.WHITE = (255, 255, 255)
        self.BLACK = (0, 0, 0)
        self.RED = (255, 0, 0)
        self.GREEN = (0, 255, 0)

        self.rows = 4
        self.cols = 4
        self.size = self.width // 4
        self.radius = self.size // 3
        self.line = 10

        self.gameboard = [["" for i in range(self.cols)] for k in range(self.rows)]
        self.player1 = 'O'
        self.player2 = 'X'
        self.current = self.player1
        self.game_over = False

        self.c_w = 2
        self.a_w = 1
        self.max_depth = 4

    def heuristic(self, row, col, player):
        """Evaluate a position using heuristics. Checked center, scores for each lines, the positions next to one position"""
        score = 0

        if (row, col) in [(1, 1), (1, 2), (2, 1), (2, 2)]:
            score += 3

        rows = self.gameboard[row]
        cols = [self.gameboard[i][col] for i in range(4)]
        diag1, diag2 = "", ""
        if row == col:
            diag1 = [self.gameboard[i][i] for i in range(4)]
        if row + col == 3:
            diag2 = [self.gameboard[i][3 - i] for i in range(4)]

        for line in [rows, cols, diag1, diag2]:
            if line:
                empty_count = line.count("")
                player_count = line.count(player)
                opponent_count = len(line) - empty_count - player_count


                if opponent_count == 0:
                    if player_count == 3:
                        score += 50
                    elif player_count == 2:
                        score += 5
                    elif player_count == 1:
                        score += 1
                elif player_count == 0 and opponent_count == 3:
                    score += 25

        for r, c in [(0, 1), (1, 0), (1, 1), (1, -1), (-1, 0), (0, -1), (-1, -1), (-1, 1)]:
            n_row, n_col = row + r, col + c
            if 0 <= n_row < 4 and 0 <= n_col < 4:
                if self.gameboard[n_row][n_col] == player:
                    score += self.a_w

        return score

    def Moves(self, player):
        """Get all possible moves which got sorted by their score"""
        moves = []
        for i in range(self.rows):
            for j in range(self.cols):
                if self.gameboard[i][j] == "":
                    score = self.heuristic(i, j, player)
                    moves.append([i, j, score])


        moves.sort(key=lambda x: x[2], reverse=True)

        return moves

    def minimax(self, gameboard, depth, alpha, beta, maximize):
        """Minimax algorithm with alpha-beta pruning and heuristic ordering."""
        if depth >= self.max_depth:
            return 0

        winner = self.Winner()
        if winner == self.player1:
            return depth - 17
        if winner == self.player2:
            return 17 - depth
        if winner == 0:
            return 0

        if maximize:
            best = float('-inf')
            moves = self.Moves(self.player2)
            for move in moves:
                if gameboard[move[0]][move[1]] == "":
                    gameboard[move[0]][move[1]] = self.player2
                    score = self.minimax(gameboard, depth + 1, alpha, beta, False)
                    gameboard[move[0]][move[1]] = ""
                    best = max(best, score)
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
            return best
        else:
            best = float('inf')
            moves = self.Moves(self.player1)
            for move in moves:
                if gameboard[move[0]][move[1]] == "":
                    gameboard[move[0]][move[1]] = self.player1
                    score = self.minimax(gameboard, depth + 1, alpha, beta, True)
                    gameboard[move[0]][move[1]] = ""
                    best = min(best, score)
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
            return best

    def best_move(self):
        """Get the best move using minimax with heuristic ordering."""
        best_value = float("-inf")
        move = None

        o_moves = self.Moves(self.player2)
        for p_move in o_moves[:5]:  # Consider top 5 moves only
            self.gameboard[p_move[0]][p_move[1]] = self.player2
            move_value = self.minimax(self.gameboard, 0, float('-inf'), float('inf'), False)
            self.gameboard[p_move[0]][p_move[1]] = ""

            if move_value > best_value:
                best_value = move_value
                move = (p_move[0], p_move[1])

        return move

    def Winner(self):
        for i in range(self.rows):
            if (self.gameboard[i][0] == self.gameboard[i][1] ==
                    self.gameboard[i][2] == self.gameboard[i][3] != ''):
                return self.gameboard[i][0]

        for j in range(self.cols):
            if (self.gameboard[0][j] == self.gameboard[1][j] ==
                    self.gameboard[2][j] == self.gameboard[3][j] != ''):
                return self.gameboard[0][j]

        if (self.gameboard[0][0] == self.gameboard[1][1] ==
                self.gameboard[2][2] == self.gameboard[3][3] != ''):
            return self.gameboard[0][0]
        if (self.gameboard[3][0] == self.gameboard[2][1] ==
                self.gameboard[1][2] == self.gameboard[0][3] != ''):
            return self.gameboard[3][0]

        count = 0
        for row in self.gameboard:
            for pos in row:
                if pos:
                    count += 1
        if count == 16:
            return 0
        return None

    def lines(self):
        for i in range(1, self.rows):
            pygame.draw.line(self.screen, self.BLACK,(0, i * self.size),(self.width, i * self.size),self.line)

        for i in range(1, self.cols):
            pygame.draw.line(self.screen, self.BLACK,(i * self.size, 0),(i * self.size, self.height),self.line)

    def marker(self):
        for i in range(self.rows):
            for j in range(self.cols):
                if self.gameboard[i][j] == self.player1:
                    pygame.draw.circle(self.screen, self.GREEN,(j * self.size + self.size // 2,i * self.size + self.size // 2),self.radius, self.line)
                elif self.gameboard[i][j] == self.player2:
                    pygame.draw.line(self.screen, self.RED,(j * self.size + 15, i * self.size + 15),(j * self.size + self.size - 15, i * self.size + self.size - 15), self.line)
                    pygame.draw.line(self.screen, self.RED,(j * self.size + 15, i * self.size + self.size - 15), (j * self.size + self.size - 15, i * self.size + 15), self.line)

    def main(self):
        self.screen.fill(self.WHITE)
        self.lines()
        self.marker()

        winner = self.Winner()
        if winner is not None:
            self.game_over = True
            if winner == 0:
                pygame.display.set_caption("It's a Tie!")
            else:
                pygame.display.set_caption(f"{winner} wins!")

        if not self.game_over and self.current == self.player2:
            move = self.best_move()
            if move:
                self.gameboard[move[0]][move[1]] = self.player2
                self.current = self.player1

        pygame.display.update()


def game_loop():
    game = TicTacToe()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if game.current == game.player1:
                    x, y = pygame.mouse.get_pos()
                    row = y // game.size
                    col = x // game.size
                    if not game.game_over and game.gameboard[row][col] == '':
                        game.gameboard[row][col] = game.player1
                        game.current = game.player2

        game.main()


if __name__ == "__main__":
    game_loop()
